{"version":3,"sources":["../../../src/routers/api/common.js"],"names":["router","Router","get","req","res","next","verifyCode","parseInt","Math","random","p","color","img","getBase64","imgbase64","Buffer","writeHead","session","end","post","body","phoneNo","code","toString","slice","smsCode","json","codeResp","requestHelper","status","message","length","error","module","exports"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,kBAAQC,MAAR,EAAb;;AAEA;;;AAGAD,OAAOE,GAAP,CAAW,mBAAX,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClD,MAAIC,aAAaC,SAASC,KAAKC,MAAL,KAAgB,IAAhB,GAAuB,IAAhC,CAAjB;AACA,MAAIC,IAAI,yBAAe,EAAf,EAAmB,EAAnB,EAAuBJ,UAAvB,CAAR,CAFkD,CAEN;AAC5CI,IAAEC,KAAF,CAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAHkD,CAG7B;AACrBD,IAAEC,KAAF,CAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,GAApB,EAJkD,CAIxB;;AAE1B,MAAIC,MAAMF,EAAEG,SAAF,EAAV;AACA,MAAIC,YAAY,IAAIC,MAAJ,CAAWH,GAAX,EAAgB,QAAhB,CAAhB;AACAR,MAAIY,SAAJ,CAAc,GAAd,EAAmB;AACjB,oBAAgB;AADC,GAAnB;;AAIA;AACAb,MAAIc,OAAJ,CAAYX,UAAZ,GAAyBA,UAAzB;;AAEAF,MAAIc,GAAJ,CAAQJ,SAAR;AACD,CAhBD;;AAkBA;;;AAGAd,OAAOmB,IAAP,CAAY,aAAZ;AAAA,wEAA2B,iBAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBC,sBAFmB,GAENH,IAAIiB,IAAJ,CAASd,UAFH;AAGnBe,mBAHmB,GAGTlB,IAAIiB,IAAJ,CAASC,OAHA;AAInBC,gBAJmB,GAIZd,KAAKC,MAAL,GAAcc,QAAd,GAAyBC,KAAzB,CAA+B,CAAC,CAAhC,CAJY;;;AAMvBrB,gBAAIc,OAAJ,CAAYQ,OAAZ,GAAsBH,IAAtB;;AANuB,kBAQnBhB,cAAcA,cAAcH,IAAIc,OAAJ,CAAYX,UARrB;AAAA;AAAA;AAAA;;AAAA,6CASdF,IAAIsB,IAAJ,CAAS;AACd,wBAAU,GADI;AAEd,yBAAW,QAFG;AAGd,sBAAQ;AAHM,aAAT,CATc;;AAAA;AAgBnBC,oBAhBmB,GAgBRC,cAAcT,IAAd,CAAmB;AAChC,4BAAc,aADkB;AAEhC,4BAAc,KAFkB;AAGhC,wBAAU,YAHsB;AAIhC,sBAAQ;AACNE,gCADM;AAENC;AAFM;AAJwB,aAAnB,CAhBQ;;;AA0BvB,gBAAIK,SAASE,MAAT,IAAmB,GAAnB,IAA0BF,SAASG,OAAT,CAAiBC,MAAjB,IAA2B,CAAzD,EAA4D;AAC1D3B,kBAAIsB,IAAJ,CAAS;AACP,0BAAU,GADH;AAEP,2BAAW,EAFJ;AAGP,wBAAQ;AAHD,eAAT;AAKD,aAND,MAOI;AACFtB,kBAAIsB,IAAJ,CAAS;AACP,0BAAU,GADH;AAEP,2BAAW,cAFJ;AAGP,wBAAQ;AAHD,eAAT;AAKD;;AAvCsB;AAAA;;AAAA;AAAA;AAAA;;AA0CvB,6BAAOM,KAAP,CAAa,gCAAb;;AA1CuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AA8CAC,OAAOC,OAAP,GAAiBlC,MAAjB","file":"common.js","sourcesContent":["import express from 'express'\nimport logger from '../../utils/logger'\nimport captchapng from 'captchapng'\n\nlet router = express.Router()\n\n/**\n * @desc 生成数字验证码\n */\nrouter.get('/genVerifyCodeImg', (req, res, next) => {\n  var verifyCode = parseInt(Math.random() * 9000 + 1000)\n  var p = new captchapng(80, 30, verifyCode); // width,height,numeric captcha \n  p.color(0, 0, 0, 0); // First color: background (red, green, blue, alpha) \n  p.color(80, 80, 80, 255); // Second color: paint (red, green, blue, alpha) \n\n  var img = p.getBase64()\n  var imgbase64 = new Buffer(img, 'base64')\n  res.writeHead(200, {\n    'Content-Type': 'image/png'\n  })\n\n  // store verify code in session for check \n  req.session.verifyCode = verifyCode\n\n  res.end(imgbase64)\n})\n\n/**\n * @desc 获取短信验证码\n */\nrouter.post('/getSmsCode', async (req, res, next) => {\n  try {\n    let verifyCode = req.body.verifyCode\n    let phoneNo = req.body.phoneNo\n    let code = Math.random().toString().slice(-6);\n\n    req.session.smsCode = code;\n\n    if (verifyCode && verifyCode != req.session.verifyCode) {\n      return res.json({\n        'status': '0',\n        'message': '验证码不正确',\n        'data': null\n      })\n    }\n\n    let codeResp = requestHelper.post({\n      \"moduleName\": \"sms_service\",\n      \"controller\": \"sms\",\n      \"action\": \"verifyCode\",\n      \"data\": {\n        phoneNo,\n        code\n      }\n    })\n\n    if (codeResp.status == \"1\" && codeResp.message.length == 0) {\n      res.json({\n        'status': '1',\n        'message': '',\n        'data': null\n      })\n    }\n    else{\n      res.json({\n        'status': '0',\n        'message': '短信获取失败，请稍后再试',\n        'data': null\n      })\n    }\n\n  } catch (e) {\n    logger.error('api_common_error' + e);\n  }\n})\n\nmodule.exports = router\n"]}