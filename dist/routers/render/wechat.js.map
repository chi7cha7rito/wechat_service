{"version":3,"sources":["../../../src/routers/render/wechat.js"],"names":["router","Router","wechatConfig","getWechat","client","appid","secret","paymentConfig","Payment","mch_id","partnerKey","host","middleware","all","token","req","res","next","message","weixin","open_id","FromUserName","menuOption","reply","title","description","picurl","url","r_url","query","state","getAccessToken","code","err","result","accessToken","data","access_token","openid","requestHelper","post","scope","expires_in","get","memberInfo","accessTokenInfo","userInfo","session","wechatUser","redirect","user","getNotify","done","out_trade_no","memberId","attach","notifyTotalFee","total_fee","notifySign","sign","tmpParmas","clone","payInfo","sortedQueryString","_toQueryString","stringSignTemp","newSign","toUpperCase","transaction_id","time_end","status","notifyInfo","Error","error","module","exports"],"mappings":"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","file":"wechat.js","sourcesContent":["import express from 'express'\nimport wechat from 'wechat'\nimport OAuth from 'wechat-oauth'\nimport logger from '../../utils/logger';\nimport config from '../../utils/config';\nimport wechatPay from 'wechat-pay'\nimport md5 from 'md5'\nimport _ from 'lodash'\n\n\n\nlet router = express.Router()\nlet wechatConfig = config.getWechat();\n\n//auth client\nlet client = new OAuth(wechatConfig.appid, wechatConfig.secret);\n\n// wechat pay unifiedorder 基本参数\nlet paymentConfig = new wechatPay.Payment({\n  'appId': wechatConfig.appid,\n  'mchId': wechatConfig.mch_id,\n  'partnerKey': wechatConfig.partnerKey,\n  'notifyUrl': `${wechatConfig.host}/wechat/notify`\n})\n\n// wechat pay notify middleware\nlet middleware = wechatPay.middleware\n\n/**\n * desc:微信验证Token的url\n */\nrouter.all('/', wechat(wechatConfig.token, async (req, res, next) => {\n  var message = req.weixin\n  let open_id = message.FromUserName\n\n  // let accessTokenInfo = await requestHelper.get({\n  //   \"moduleName\": \"wechat\",\n  //   \"controller\": \"common\",\n  //   \"action\": \"getAccessToken\",\n  //   \"data\": {\n  //     \"grant_type\": \"client_credential\",\n  //     \"appid\": wechatConfig.appid,\n  //     \"secret\": wechatConfig.secret\n  //   }\n  // });\n\n  // console.log(accessTokenInfo)\n\n  // //menu\n  let menuOption = {\n    \"button\": [\n      {\n        \"name\": \"会员服务\",\n        \"sub_button\": [\n          {\n            \"type\": \"view\",\n            \"name\": \"会员中心\",\n            \"url\": `${wechatConfig.host}/personal/list`\n          },\n          {\n            \"type\": \"view\",\n            \"name\": \"在线充值\",\n            \"url\": `${wechatConfig.host}/pay/wechat`\n          },\n          {\n            \"type\": \"view\",\n            \"name\": \"在线签到\",\n            \"url\": `${wechatConfig.host}/account/signIn`\n          },\n          {\n            \"type\": \"view\",\n            \"name\": \"战绩查询\",\n            \"url\": `${wechatConfig.host}/match/result`\n          },\n        ]\n      },\n      {\n        \"name\": \"赛事报名\",\n        \"sub_button\": [\n          {\n            \"type\": \"view\",\n            \"name\": \"赛事预告\",\n            \"url\": `${wechatConfig.host}/match/list`\n          },\n          {\n            \"type\": \"view\",\n            \"name\": \"在线报名\",\n            \"url\": `${wechatConfig.host}/match/apply`\n          }\n        ]\n      },\n      {\n        \"name\": \"豪客专享\",\n        \"sub_button\": [\n          {\n            \"type\": \"view\",\n            \"name\": \"贵宾室预定\",\n            \"url\": `${wechatConfig.host}/booking/room`\n          },\n          {\n            \"type\": \"view\",\n            \"name\": \"豪客风采\",\n            \"url\": `${wechatConfig.host}/match/share`\n          }\n        ]\n      }\n    ]\n  }\n\n  //create Menu\n  // let menuResp = await requestHelper.post({\n  //   \"moduleName\": \"wechat\",\n  //   \"controller\": \"common\",\n  //   \"action\": \"createMenu\",\n  //   \"data\": menuOption\n  // });\n\n  // console.log(menuResp);\n\n  // res.reply('尚在建设中，请耐心等待！')\n  res.reply([\n      {\n        title: '快来加入豪客俱乐部',\n        description: '',\n        picurl: 'http://www.holecardsclub.com/images/WechatIMG208.jpeg',\n        url: 'http://www.holecardsclub.com/common/intro'\n      }\n    ]);\n}))\n\n\n/**\n * desc:微信网页授权回调url地址\n */\nrouter.all('/auth', async (req, res, next) => {\n  let r_url = req.query.state; //成功操作后的跳转url;\n\n  client.getAccessToken(req.query.code, async function (err, result) {\n    let accessToken = result.data.access_token;//网页授权access_token\n    let openid = result.data.openid;\n\n    //将token 信息 存入db\n    await requestHelper.post({\n      \"moduleName\": \"hulk_service\",\n      \"controller\": \"wechatToken\",\n      \"action\": \"create\",\n      \"data\": {\n        \"access_token\": accessToken,\n        \"openid\": openid,\n        \"scope\": result.data.scope,\n        \"expires_in\": result.data.expires_in\n      }\n    })\n\n    let memberInfo = await requestHelper.get({\n      \"moduleName\": \"hulk_service\",\n      \"controller\": \"member\",\n      \"action\": \"find\",\n      \"data\": {\n        \"wechatOpenId\": openid\n      }\n    });\n\n    if (!memberInfo.data) {\n      //获取全局的access_token\n      let accessTokenInfo = await requestHelper.get({\n        \"moduleName\": \"wechat\",\n        \"controller\": \"common\",\n        \"action\": \"getAccessToken\",\n        \"data\": {\n          \"grant_type\": \"client_credential\",\n          \"appid\": wechatConfig.appid,\n          \"secret\": wechatConfig.secret\n        }\n      });\n\n\n      //获取openid 对应的用户基本信息\n      let userInfo = await requestHelper.get({\n        \"moduleName\": \"wechat\",\n        \"controller\": \"common\",\n        \"action\": \"getUserInfo\",\n        \"data\": {\n          \"access_token\": accessTokenInfo.access_token,\n          \"openid\": openid\n        }\n      })\n\n      //存入session\n      req.session.wechatUser = userInfo;\n\n      return res.redirect('/account/register?returnUrl=' + r_url)\n    }\n    else {\n      req.session.user = memberInfo.data;\n\n      return res.redirect(r_url)\n    }\n  });\n})\n\n/**\n * desc:接收微信支付回调请求\n * @see https://api.mch.weixin.qq.com/pay/unifiedorder\n */\nrouter.all('/notify', middleware(paymentConfig).getNotify().done(async function (message, req, res, next) {\n  try {\n    let openid = message.openid\n    let out_trade_no = message.out_trade_no;//订单号\n    let memberId = message.attach;\n    let notifyTotalFee = message.total_fee;\n    let notifySign = message.sign;\n    let tmpParmas = _.clone(message);\n\n    //先查询\n    let payInfo = await requestHelper.get({\n      \"moduleName\": \"hulk_service\",\n      \"controller\": \"wechatPayment\",\n      \"action\": \"find\",\n      \"data\": {\n        \"memberId\": memberId,\n        \"out_trade_no\": out_trade_no\n      }\n    })\n\n    if (payInfo && payInfo.data) {\n      delete tmpParmas.sign;\n      let sortedQueryString = paymentConfig._toQueryString(tmpParmas);\n      let stringSignTemp = sortedQueryString + '&key=' + wechatConfig.partnerKey;\n      let newSign = md5(stringSignTemp).toUpperCase();\n\n      //签名验证,并校验返回的订单金额是否与商户侧的订单金额一致\n      if (payInfo.data.total_fee == notifyTotalFee && newSign == notifySign) {\n        //更新payment row status \n        let transaction_id = message.transaction_id;\n        let time_end = message.time_end;\n        let status = \"2\"\n\n        let notifyInfo = await requestHelper.post({\n          \"moduleName\": \"hulk_service\",\n          \"controller\": \"wechatPayment\",\n          \"action\": \"notify\",\n          \"data\": {\n            out_trade_no,\n            transaction_id,\n            time_end,\n            status\n          }\n        })\n\n        if (notifyInfo.status == \"1\" && !notifyInfo.message) {\n          /**\n         * 查询订单，在自己系统里把订单标为已处理\n         * 如果订单之前已经处理过了直接返回成功\n         */\n          res.reply('success')\n        }\n        else {\n          /**\n         * 有错误返回错误，不然微信会在一段时间里以一定频次请求你\n         * res.reply(new Error('...'))\n         */\n          res.reply(new Error('订单更新失败'))\n        }\n      } else {\n        /**\n       * 有错误返回错误，不然微信会在一段时间里以一定频次请求你\n       * res.reply(new Error('...'))\n       */\n        res.reply(new Error('回调信息有误'))\n      }\n    }\n  } catch (e) {\n    logger.error('wechat_notify_error' + e)\n  }\n}))\n\n\nmodule.exports = router\n"]}