{"version":3,"sources":["../../src/utils/loader.js"],"names":["Loader","p","newPath","join","__dirname","existsSync","files","readdirSync","length","module"],"mappings":";;;;;;;;;;;;;;AAMA;;;;AACA;;;;AACA;;;;;;IACMA,M;;;;;;;;;AAEF;;;;mCAIkBC,C,EAAG;AACjB,gBAAIC,UAAU,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2BH,CAA3B,CAAd;AACA,gBAAI,aAAGI,UAAH,CAAcH,OAAd,CAAJ,EAA4B;AACxB,oBAAII,QAAQ,aAAGC,WAAH,CAAeL,OAAf,CAAZ;AACA,oBAAII,SAASA,MAAME,MAAnB,EACI,OAAO,gCAAiBC,MAAjB,EAAyBP,OAAzB,CAAP;AACP;AACD,mBAAO,EAAP;AACH;;;KAvBL;;;;;;kBA0BeF,M","file":"loader.js","sourcesContent":["/**\n * author:yuxiaochen@lifang.com\n * desc:depends on require-diretory package to recursively iterates over specified directory, \n * require()'ing each file, and returning a nested hash structure containing those modules.\n */\n\nimport requireDirectory from 'require-directory';\nimport path from 'path';\nimport fs from 'fs';\nclass Loader {\n\n    /**\n     * @desc 获取指定目录下的modules 集合\n     * @param  {} p:相对于loader的路径\n     */\n    static getModules(p) {\n        let newPath = path.join(__dirname, '..', p);\n        if (fs.existsSync(newPath)) {\n            let files = fs.readdirSync(newPath);\n            if (files && files.length)\n                return requireDirectory(module, newPath);\n        }\n        return {};\n    }\n}\n\nexport default Loader;"]}