{"version":3,"sources":["../../src/utils/request.js"],"names":["service_Token","getServiceToken","Http_Request","moduleName","controller","action","data","resp","uri","getApi","options","method","qs","json","headers","info","error","contentType","body","token"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,iBAAOC,eAAP,EAAtB;;IAEMC,Y;;;;;;;;;AAEF;;;;;;;oBAKYC,U,SAAAA,U;oBAAYC,U,SAAAA,U;oBAAYC,M,SAAAA,M;oBAAQC,I,SAAAA,I;;;;;;;AAEhCC,oC;AACAC,mC,GAAM,iBAAOC,MAAP,CAAcN,UAAd,EAA0BC,UAA1B,EAAsCC,MAAtC,C;AACNK,uC,GAAU;AACVC,4CAAQ,KADE;AAEVH,yCAAKA,GAFK;AAGVI,wCAAIN,IAHM;AAIVO,0CAAM,IAJI;AAKVC,6CAAS;AACL,sDAAcd;AADT;AALC,iC;;AAUd;;AACA,oCAAIG,cAAc,cAAlB,EAAkC;AAC9B,2CAAOO,QAAQI,OAAf;AACH;;AAED,iDAAOC,IAAP,CAAeZ,UAAf,SAA6BC,UAA7B,SAA2CC,MAA3C,sBAAkE,yBAAeK,OAAf,CAAlE;;;uCAEa,8BAAGA,OAAH,C;;;AAAbH,oC;;;AAEA,iDAAOQ,IAAP,CAAeZ,UAAf,SAA6BC,UAA7B,SAA2CC,MAA3C,uBAAmE,yBAAeE,IAAf,CAAnE;;iEAEOA,I;;;;;;AAGP,iDAAOS,KAAP,CAAgBb,UAAhB,SAA8BC,UAA9B,SAA4CC,MAA5C,eAA4D,qCAA5D;;;;;;;;;;;;;;;;AAGR;;;;;;;;;;;oBAMaF,U,SAAAA,U;oBAAYC,U,SAAAA,U;oBAAYC,M,SAAAA,M;oBAAQC,I,SAAAA,I;8CAAMW,W;oBAAAA,W,qCAAc,kB;;;;;;;AAErDV,oC;AACAC,mC,GAAM,iBAAOC,MAAP,CAAcN,UAAd,EAA0BC,UAA1B,EAAsCC,MAAtC,C;AAENK,uC,GAAU;AACVI,6CAAS;AACL,sDAAcd,aADT;AAEL,wDAAgBiB;AAFX,qCADC;AAKVN,4CAAQ,MALE;AAMVH,yCAAKA,GANK;AAOVU,0CAAMZ,IAPI;AAQVO,0CAAM;AARI,iC;;AAWd;;AACA,oCAAIV,cAAc,cAAlB,EAAkC;AAC9B,2CAAOO,QAAQI,OAAR,CAAgBK,KAAvB;AACH;;AAED,iDAAOJ,IAAP,CAAeZ,UAAf,SAA6BC,UAA7B,SAA2CC,MAA3C,sBAAkE,yBAAeK,OAAf,CAAlE;;;uCAEa,8BAAGA,OAAH,C;;;AAAbH,oC;;;AAEA,iDAAOQ,IAAP,CAAeZ,UAAf,SAA6BC,UAA7B,SAA2CC,MAA3C,uBAAmE,yBAAeE,IAAf,CAAnE;;kEAEOA,I;;;;;;AAGP,iDAAOS,KAAP,CAAgBb,UAAhB,SAA8BC,UAA9B,SAA4CC,MAA5C,eAA4D,sCAA5D;;;;;;;;;;;;;;;;;;;;kBAKGH,Y","file":"request.js","sourcesContent":["import rp from 'request-promise'\nimport config from '../utils/config'\nimport logger from './logger';\n\nconst service_Token = config.getServiceToken();\n\nclass Http_Request {\n\n    /**\n     * @param  {} module\n     * @param  {} name\n     * @param  {} data\n     */\n    async get({ moduleName, controller, action, data }) {\n        try {\n            let resp;\n            let uri = config.getApi(moduleName, controller, action);\n            let options = {\n                method: \"GET\",\n                uri: uri,\n                qs: data,\n                json: true,\n                headers: {\n                    \"hulk_token\": service_Token\n                }\n            }\n\n            //目前只有调用hulk_service 需要headers 加入 token\n            if (moduleName != \"hulk_service\") {\n                delete options.headers;\n            }\n\n            logger.info(`${moduleName}_${controller}_${action}_request_data:${JSON.stringify(options)}`)\n\n            resp = await rp(options);\n\n            logger.info(`${moduleName}_${controller}_${action}_response_data:${JSON.stringify(resp)}`)\n\n            return resp;\n        }\n        catch (e) {\n            logger.error(`${moduleName}_${controller}_${action}_error:${JSON.stringify(e)}`)\n        }\n    }\n    /**\n     * @param  {} module\n     * @param  {} action\n     * @param  {} contentType\n     * @param  {} data\n     */\n    async post({ moduleName, controller, action, data, contentType = \"application/json\" }) {\n        try {\n            let resp;\n            let uri = config.getApi(moduleName, controller, action);\n\n            let options = {\n                headers: {\n                    \"hulk_token\": service_Token,\n                    \"Content-Type\": contentType\n                },\n                method: \"POST\",\n                uri: uri,\n                body: data,\n                json: true\n            }\n\n            //目前只有调用hulk_service 需要headers 加入 token\n            if (moduleName != \"hulk_service\") {\n                delete options.headers.token;\n            }\n\n            logger.info(`${moduleName}_${controller}_${action}_request_data:${JSON.stringify(options)}`)\n\n            resp = await rp(options);\n\n            logger.info(`${moduleName}_${controller}_${action}_response_data:${JSON.stringify(resp)}`)\n\n            return resp;\n        }\n        catch (e) {\n            logger.error(`${moduleName}_${controller}_${action}_error:${JSON.stringify(e)}`)\n        }\n    }\n}\n\nexport default Http_Request;"]}